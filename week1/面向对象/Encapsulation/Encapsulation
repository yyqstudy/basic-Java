/*
通过对象直接访问成员变量，会存在数据安全问题
 * 这个时候，我们就想能不能不让外界的对象直接访问成员变量呢?
 * 能。
 * 如何实现呢?
 * private关键字
 *
 * private:
 * 		是一个权限修饰符
 * 		可以修饰成员变量和成员方法
 * 		作用是保护成员不被别的类使用，被private修饰的成员只能在本类中被访问
 *
 * 针对private修饰的成员变量
    提供"get变量名()"方法，用于获取成员变量的值,方法用public修饰
    提供"set变量名(参数)"方法，用于设置成员变量的值,方法用public修饰

this修饰的变量用于指代成员变量
什么时候使用this呢？--局部变量和成员变量重名
this:代表所在类的对象引用
 	方法被哪个对象调用，this就代表那个对象

/*
public class Student {
	private String name;
	private int age;
    public void setName(String name) {
    		//name = name;//默认都是局部变量
    		this.name = name;加了this之后，就默认成员变量
    	}
A:封装概述
是面向对象三大特征之一
是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。就像刚才说的年龄。
B:封装原则：
将不需要对外提供的内容都隐藏起来。
把属性隐藏，提供公共方法对其访问。
成员变量private，提供对应的getXxx()/setXxx()方法
C:好处：
通过方法来控制成员变量的操作，提高了代码的安全性
把代码用方法进行封装，提高了代码的复用性
