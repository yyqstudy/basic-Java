实现多线程
进程：正在运行的程序
是系统进行资源分配和调用的独立单位
每一个进程都有它自己的内存空间和系统资源

线程：是进程中的单个顺序控制流，是一条执行路径
单线程：一个进程如果只有一条执行路径，则称为单线程程序---记事本程序
week3.多线程：一个进程如果只有多条执行路径，则称为多线程程序---扫雷程序

------------------------------------
多线程的实现方式
方式1：继承Thread类
1、定义一个class--MyThread继承Thread
2、在MyThread中重写run()方法
3、创建MyThread的对象
4、启动线程

两个小问题：
（1）为什么重写run()方法？
   ---因为run()是用来封装被线程执行的代码
（2）run()和start()方法的区别？
   ---run()：封装线程执行的代码，直接调用---等同于普通的方法调用
   ---start()：启动线程，然后由JVM调用此线程的run()方法

方式2：实现Runnable接口
------------------------------------
设置和获取线程名称
Thread类中设置和获取线程名称方法：
方法一：
  void setName(String name):将此线程的名称更改参数name
  String getName():返回此线程的名称

方法二：通过构造方法设置---带参数构造---要到Thread Class中提供一个带参数构造方法---通过super()去访问父类的带参数构造

如何获取main()方法所在的线程名称
static Thread currentThread():返回对当前正在执行的线程对象的引用

------------------------------------
线程优先级
线性调度类型：
分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片
抢占式调度模型：优先让优先级高的线程使用CPU，如果线程优先级相同，那么随机选择一个，优先级高的线程获取的CPU时间片相对多一些

Java使用的是抢占式

多线程程序执行的是有随机性，谁抢到CPU的使用权是不一定的

Thread类设置和获取线程优先级的方法：
public final int getPriority():返回此线程的优先级
public final void setPriority(int newPriority):更改此线程的优先级
  线程默认优先级是5，线程优先级的范围是：1～10
  线程优先级高仅仅是表示线程获取的CPU时间片的几率高，但是要在次数比较多，或者多次运行的时候才能看到你想要的效果

------------------------------------
线程控制
static void sleep(long millis): 使当前正在执行的线程停留（暂时执行）指定的毫秒数--- millis---long类型
                                在类书写sleep()，而不是测试类
void join(): 等待这个线程死亡（执行完毕），其它线程才可以执行--在测试类上写join()方法
void setDaemon(boolean on):将此线程标记为守护线程，当运行的线程都是守护线程时候，Java虚拟机将退出
                           主线程执行完毕后，守护线程也要执行完毕，但不会立即消失

                          设置主线程---static Thread currentThread()

------------------------------------
多线程实现方式
方式2：实现Runnable接口
1、定义一个类MyRunnable实现Runnable接口---MyRunnable没有继承Thread类，实现的是 Runnable接口---所以不能直接使用getName()---而是Thread.currentThread().getName()
2、在MyRunnable类中重写run()方法
3、创建MyRunnable类的对象
4、创建Thread类的对象，把MyRunnable对象作为构造方法的参数
5、启动线程

多线程实现方案有两种
继承Thread类
实现Runnable接口

相比继承Thread类，实现Runnable接口的好处
1、避免了Java单继承的局限性
2、适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现面向对象设计思想

MyRunnable没有继承Thread类，实现的是 Runnable接口---所以不能直接使用getName()---而是Thread.currentThread().getName()

知识回顾：
类与接口之间:只有实现关系,可以单实现，可以多实现，还可以继承一个类同时实现多个接口