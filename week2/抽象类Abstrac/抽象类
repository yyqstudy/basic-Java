抽象类

只抽取方法声明，不抽取方法主体。那么此方法就是一个抽象方法。
当特定的子类不重写方法时候，直接就会输出父类的方法主体
比如animal-eat food
   cat不重写，也还是输出eat food

public abstract class Animal(){
     public abstract void eat();

}

抽象类不能创建对象，因为不是具体的

--------------------------------
抽象类特点
(1)抽象类和抽象方法必须使用abstract关键字修饰
public abstract class 类名{}
public abstract void eat();

(2)抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类

(3)抽象类不能实例化
如何实例化？ 参照多态形式，通过子类对象实例化，这是抽象类多态

(4)抽象类的子类
要么重写抽象类中的所有抽象方法
要么是抽象类
～～～～～～～～～～～
抽象类创建对象--参考多态形式--子类、继承extends
此时
1、抽象类的子类要么重写override抽象类的所有抽象方法，然后创建对象
public class Cat extends Animal(){
    @Override
    public void eat(){
       System.out.printlin("Cat eat fish");
    }
}

此时测试类中的main()
 Animal a = new Cat(); //☑️
 a.eat();


2、抽象类的子类要么本身变为抽象类

Public abstract class Dog extends Animal{
   }


--------------------------------
抽象类的成员特点

(1)成员变量：
   常量、变量都可以
(2)构造方法（无参数和有参数）
   有构造方法，但是不能实例化（直接创建对象）
   那么，作用是什么？---用于子类访问父类数据的初始化
(3)成员方法（抽象和非抽象）
  抽象方法：限定子类必须完成某些动作
  非抽象方法：提高代码复用性