字符流
    由于ByteStream操作中文不方便，所以CharacterStream出现
    CharacterStream = ByteStream + 编码表
    用字节流复制文本文件时候，文本有中文也不会出现bug，是因为最终底层操作会自动进行字节拼接成中文
    如何识别中文？
    汉字在存储时候，无论选择哪种编码存储，第一个字节都是负数

中国
    UTF-8：[-28,-72,-83,-27,-101,-67]
    GBK:[-42,-48,-71,-6]

----------------------------------
字符串中的编码解码问题
编码
    byte[] getBytes():平台默认字符集将该String编码，将结果存储在新的字节数组中
    byte[] getBytes(String charsetName):指定的字符集将该String编码，将结果存储在新的字节数组中

解码
    String(byte[] bytes):平台默认字符集解码指定的数组构造新的String
    String(byte[] bytes, String charsetName):指定的字符集字符集解码指定的数组构造新的String

----------------------------------
字符流中的编码解码问题
字符流抽象类
    Reader:字符输入流的抽象类
    Writer：字符输出流的抽象类

字符流中编码解码相关的两个类
    InputStreamReader
    OutputStreamWriter

    OutputStreamWriter(OutputStream out):创建一个使用默认字符编码的OutputStreamWriter
     OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("url"));

    说明：
        FileOutputStream fos = new FileOutputStream("/Users/yyq/Desktop/osw.txt");
        OutputStreamWriter osw = new OutputStreamWriter(fos);
        上面两行合并成下面一行代码
        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("/Users/yyq/Desktop/osw.txt"));


----------------------------------
构造方法
    OutputStreamWriter(OutputStream out):创建一个使用默认字符编码的OutputStreamWriter

字符流写数据的5种方式
    void write(int c) 写一个字符
    void write(char[] cbuf) 写入一个字符数组
    void write(char[] cbuf, int off, int len) 写入字符数组的一部分
    void write(String str) 写一个字符串
    void write(String str, int off, int len)  写一个字符串的一部分

write(String str, int off, int len)和write(char[] cbuf, int off, int len)有什么不同
字符流的write(String str, int off, int len) 源码底层实现了getChars和write(char[] cbuf, int off, int len)，字节流不行

flush()---刷新流，还可以继续写数据（在txt中有输出）
close()---关闭流，释放资源，但是在关闭之前会先运行刷新流；一旦关闭，就不能再写数据（在txt中无输出）

----------------------------------
字符流读数据

构造方法
    InputStreamReader(InputStream in):创建一个使用默认字符编码的InputStreamReader

读数据的2种方式
    int read():一次读一个字符数据
    int read(char[] cbuf):一次读一个字符数组数据

----------------------------------
案例：字符流复制Java文件

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop

思路：
    1、根据数据源创建字节输入流对象
    2、根据目的地创建字节输出流对象
    3、读写数据，复制视频
    4、释放资源

----------------------------------
案例：字符流复制Java文件---改进版

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop/Scientist.java

分析：
（1）转换流（InputStreamReader和OutputStreamWriter）名字比较长---简化书写--使用转换流的子类
（2）FileReader:用于读取字符文件的便捷类
      FileReader(String fileName)
（3）FileWriter：用于写入字符文件的便捷类
      FileWriter(String fileName)
（4）数据源和目的地分析🌟🌟🌟
    数据源：/Users/yyq/Desktop/bs4/Scientist.java----读数据---Reader（抽象类）---InputStreamReader---FileReader

    目的地：/Users/yyq/Desktop/Scientist.java---写数据---Writer（抽象类）--- OutputStreamWriter--- FileWriter

思路：
    1、根据数据源创建字节输入流对象
    2、根据目的地创建字节输出流对象
    3、读写数据，复制视频
    4、释放资源

----------------------------------
字符缓冲流
BufferedWriter:将文本写入字符输出流，缓冲字符，以提供单个字符、数组和字符串的高效写入。
可以指定缓冲区大小，或者可以接受默认大小，默认值足够大，可用于大多数用途
BufferedReader

构造方法
BufferedWriter(Write out)
BufferedReader (Reader in)

----------------------------------
案例：字符流复制Java文件---字符缓冲改进版

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop/Scientist.java


思路：
    1、根据数据源创建字节缓冲输入流对象
    2、根据目的地创建字节缓冲输出流对象
    3、读写数据，复制视频
    4、释放资源

----------------------------------
字符流缓冲流特有功能
BufferedWriter：
 void newLine():写一行的行分隔符

 标准搭配
 newLine();
 flush();
 close();


BufferedReader:
 public String readLine():读一行代码，结果包含行的内容字符串，不包含终止字符，如果到结尾，则为null

----------------------------------
案例：字符流复制Java文件---字符缓冲特有功能

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop/Scientist.java


思路：
    1、根据数据源创建字节缓冲输入流对象
    2、根据目的地创建字节缓冲输出流对象
    3、读写数据，复制视频
    4、释放资源