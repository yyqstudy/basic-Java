字符流
    由于ByteStream操作中文不方便，所以CharacterStream出现
    CharacterStream = ByteStream + 编码表
    用字节流复制文本文件时候，文本有中文也不会出现bug，是因为最终底层操作会自动进行字节拼接成中文
    如何识别中文？
    汉字在存储时候，无论选择哪种编码存储，第一个字节都是负数

中国
    UTF-8：[-28,-72,-83,-27,-101,-67]
    GBK:[-42,-48,-71,-6]

----------------------------------
字符串中的编码解码问题
编码
    byte[] getBytes():平台默认字符集将该String编码，将结果存储在新的字节数组中
    byte[] getBytes(String charsetName):指定的字符集将该String编码，将结果存储在新的字节数组中

解码
    String(byte[] bytes):平台默认字符集解码指定的数组构造新的String
    String(byte[] bytes, String charsetName):指定的字符集字符集解码指定的数组构造新的String

----------------------------------
字符流中的编码解码问题
字符流抽象类
    Reader:字符输入流的抽象类
    Writer：字符输出流的抽象类

字符流中编码解码相关的两个类
    InputStreamReader
    OutputStreamWriter

    OutputStreamWriter(OutputStream out):创建一个使用默认字符编码的OutputStreamWriter
     OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("url"));

    说明：
        FileOutputStream fos = new FileOutputStream("/Users/yyq/Desktop/osw.txt");
        OutputStreamWriter osw = new OutputStreamWriter(fos);
        上面两行合并成下面一行代码
        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("/Users/yyq/Desktop/osw.txt"));


----------------------------------
构造方法
    OutputStreamWriter(OutputStream out):创建一个使用默认字符编码的OutputStreamWriter

字符流写数据的5种方式
    void write(int c) 写一个字符
    void write(char[] cbuf) 写入一个字符数组
    void write(char[] cbuf, int off, int len) 写入字符数组的一部分
    void write(String str) 写一个字符串
    void write(String str, int off, int len)  写一个字符串的一部分

write(String str, int off, int len)和write(char[] cbuf, int off, int len)有什么不同
字符流的write(String str, int off, int len) 源码底层实现了getChars和write(char[] cbuf, int off, int len)，字节流不行

flush()---刷新流，还可以继续写数据（在txt中有输出）
close()---关闭流，释放资源，但是在关闭之前会先运行刷新流；一旦关闭，就不能再写数据（在txt中无输出）

----------------------------------
字符流读数据

构造方法
    InputStreamReader(InputStream in):创建一个使用默认字符编码的InputStreamReader

读数据的2种方式
    int read():一次读一个字符数据
    int read(char[] cbuf):一次读一个字符数组数据

----------------------------------
案例：字符流复制Java文件

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop

思路：
    1、根据数据源创建字节输入流对象
    2、根据目的地创建字节输出流对象--创建要写入的文件
    3、读写数据，复制视频
    4、释放资源

----------------------------------
案例：字符流复制Java文件---改进版

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop/Scientist.java

分析：
（1）转换流（InputStreamReader和OutputStreamWriter）名字比较长---简化书写--使用转换流的子类
（2）FileReader:用于读取字符文件的便捷类
      FileReader(String fileName)
（3）FileWriter：用于写入字符文件的便捷类
      FileWriter(String fileName)
（4）数据源和目的地分析🌟🌟🌟
    数据源：/Users/yyq/Desktop/bs4/Scientist.java----读数据---Reader（抽象类）---InputStreamReader---FileReader

    目的地：/Users/yyq/Desktop/Scientist.java---写数据---Writer（抽象类）--- OutputStreamWriter--- FileWriter

思路：
    1、根据数据源创建字节输入流对象
    2、根据目的地创建字节输出流对象--创建要写入的文件
    3、读写数据，复制视频
    4、释放资源

----------------------------------
字符缓冲流
BufferedWriter:将文本写入字符输出流，缓冲字符，以提供单个字符、数组和字符串的高效写入。
可以指定缓冲区大小，或者可以接受默认大小，默认值足够大，可用于大多数用途
BufferedReader

构造方法
BufferedWriter(Write out)
BufferedReader (Reader in)

----------------------------------
案例：字符流复制Java文件---字符缓冲改进版

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop/Scientist.java


思路：
    1、根据数据源创建字节缓冲输入流对象
    2、根据目的地创建字节缓冲输出流对象
    3、读写数据，复制视频
    4、释放资源

----------------------------------
字符流缓冲流特有功能
BufferedWriter：
 void newLine():写一行的行分隔符

 标准搭配
 newLine();
 flush();
 close();


BufferedReader:
 public String readLine():读一行代码，结果包含行的内容字符串，不包含终止字符，如果到结尾，则为null

----------------------------------
案例：字符流复制Java文件---字符缓冲特有功能

要求：把/Users/yyq/Desktop/bs4/Scientist.java复制到/Users/yyq/Desktop/Scientist.java


思路：
    1、根据数据源创建字节缓冲输入流对象
    2、根据目的地创建字节缓冲输出流对象--创建要写入的文件
    3、读写数据，复制视频
    4、释放资源


----------------------------------
目的地和数据源不是文件文本，是其它也可以，比如集合ArrayList

集合到文件

要求：把ArrayList集合中的字符串数据写入文本文件中。
     每一个字符串元素作为文件中的一行数据

思路：
1、创建ArrayList集合
2、往集合中存储字符串元素
3、创建字符缓冲输出流对象--创建要写入的文件
4、遍历集合，得到每一个字符串数据
5、调用字符缓冲输出流对象的方法写数据
6、释放资源

----------------------------------
文件到集合

要求：把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据都是一个集合元素
     这个在console输出

思路：
1、创建字符缓冲输入流对象
2、创建ArrayList集合对象
3、调用字符缓冲输入流对象的方法读数据
4、把读取到的字符串数据存储到集合中
5、释放资源
6、遍历集合

----------------------------------
案例：点名器

要求：一个文件存储班级同学姓名，每一个姓名占一行，要求通过程序实现随机点名器

思路：
1、创建字符缓冲输入流对象
2、创建ArrayList集合对象
3、调用字符缓冲输入流对象的方法读数据
4、把读取到的字符串数据存储到集合中
5、释放资源
6、使用Random产生一个随机数，随机数的范围在[0,集合的长度）
7、把第6步产生的随机数作为索引到ArrayList集合中取值
8、把第7步得到的数据输出在控制台

----------------------------------
集合到文件(改进版）

要求：把ArrayList集合中的学生数据写入文本文件中。
     每一个学生元素作为文件中的一行数据

格式： 学号，姓名，年龄，居住地
举例：001, Albert, 30, Canada

思路：
1、定义学生类
2、创建ArrayList集合对象
3、创建学生对象
4、把学生对象添加到集合中
5、创建字符缓冲输出流对象---创建要写入的文件
6、遍历集合，得到每一个学生对象
7、把学生对象的数据拼接成指定格式的字符串
8、调用字符缓冲输出流对象方法写数据
9、释放资源

----------------------------------
文件到集合（改进版）

要求：把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据都是一个学生对象的成员变量值
    举例：001，Alice，17，US
    这个在console输出

思路：
 1、定义学生类
 2、创建字符缓冲输入流对象
 3、创建ArrayList集合对象
 4、调用字符缓冲输入流对象的方法读数据
 5、把读取到到字符串数据用split()进行分隔，得到一个字符串数组
 6、创建学生对象
 7、把字符串数组中的每一个元素取出来对应赋值给学生对象的成员变量值
 8、把学生对象添加到集合
 9、释放资源
 10、遍历集合

----------------------------------
集合到文件(数据排序改进版）
要求：键盘录入5个学生信息（姓名、语文成绩、数学成绩、 英语成绩）
     成绩总分从高到低写入文本
 格式：
 姓名、语文成绩、数学成绩、英语成绩
 举例：
 Tom,98,99,100

思路：
 1、定义学生类
 2、创建TreeSet集合，通过比较器排序进行
 3、键盘录入学生数据---Scanner
 4、创建学生对象，把键盘录入到数据对应赋值给学生对象的成员变量
 5、把学生对象添加到TreeSet集合
 6、创建字符缓冲输出流对象---创建要写入的文件
 7、遍历集合，得到每一个学生对象
 8、把学生对象的数据拼接成指定格式的字符串---StringBuilder
 9、调用字符缓冲输出对象的方法写数据
 10、释放资源


三元运算符： 格式：关系表达式？表达式1：表达式2
    范例： a>b ? a:b
    首先计算关系表达式的值
    如果值为true，运算结果就是表达式1；
    如果值为false，运算结果就是表达式2；
----------------------------------
Case12
案例：复制单级文件夹
要求：把/Users/yyq/Desktop/worldbank这个文件夹复制到模块目录下

思路：
数据源
1、创建数据源目录File----路径是/Users/yyq/Desktop/worldbank
2、获取数据源目录File的名称---worldbank
目的地
3、创建目的地目录File对象，路径名是模块名+worldbank组成--------"./week2/IO流/字符流/worldbank"
4、判断目的地是否已经存在File---如果不存在，就创建
数据源
5、获取数据源目录下所有文件的File数组
6、遍历File数组，得到每一个File对象，该File对象---数据源文件
  eg. /Users/yyq/Desktop/worldbank/wherehtml.png
7、获取数据源文件File对象的名称
目的地
8、创建目的地文件File对象，路径名是目的地目录+wherehtml.png组成----"./week2/IO流/字符流/worldbank/wherehtml.png"
9、复制文件---由于文件不仅是文本，还有图片视频-----采用字节流复制

～～～～～～～～～～～～～
回顾File的创建

boolean mkdir():当指定的单级文件夹不存在时创建File并返回true，否则返回false
boolean mkdirs():当指定的多级文件夹某一级文件夹不存在时,创建多级文件夹并返回true,否则返回false

----------------------------------
Case13
案例：复制多级文件夹---使用递归
要求：要求：把/Users/yyq/Desktop/IBM课程10这个文件夹复制到模块目录下

思路：
1、创建数据源目录Folder---路径是"/Users/yyq/Desktop/IBM课程10"
2、创建目的地Folder对象---路径是"./week2/IO流/字符流/IBM课程10"
3、定义一个方法---实现文件夹复制---参数：数据源Folder对象和目的地Folder对象---返回值：
4、判断数据源Folder是否是目录---boolean isDirectory():判断是否是目录
   是：
    A：在目的地下创建和数据源Folder名称一样的目录
    B：获取数据源Folder下所有文件或者目录File数组
    C：遍历该File数组，得到每一个File对象
    D：把该File作为数据源File对象---递归--调用复制文件夹方法
   不是：
   说明是文件，直接复制---用字节流复制---参考Case12

----------------------------------
复制文件的异常处理

try...catch...finally的做法：

     try{
       可能出现异常代码;
     }catch(异常类名 变量名){
       异常的处理代码;
     }finally{
       执行所有的清除操作
     }

JDK7改进方法：
     try(){
      可能出现异常代码;
     }catch(异常类名 变量名){
      异常的处理代码;
     }

JDK9改进方案：
      定义输入流对象；
      定义输出流对象；
      try(输入流对象;输出流对象){
            可能出现异常代码;
           }catch(异常类名 变量名){
            异常的处理代码;
           }