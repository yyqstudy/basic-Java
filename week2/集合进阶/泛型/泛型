泛型
本质是参数化类型，在使用/调用时候才传入具体类型

格式：
形参：
<类型>
<类型1,类型2,……>
实参：
具体引用时候给定类型--引用数据类型

好处：
把运行时期的问题提前到编译期间
避免强制类型

什么时候可以使用泛型？
  问API，当我们看到<E>，就可以使用泛型了

例子
ArrayList<String> arrl =new ArrayList<String>(),那么String就把E替换掉了--这里到<>里面到string
就是泛型

----------------------------
泛型类
格式：修饰符 class 类名<类型>{}
范例：public class Generic <T> {}
  此处的T可以随便写为任意标识，常见的如T、K、E、V等形式的参数用于表示泛型

----------------------------
泛型方法
格式：
修饰符 <类型> 返回值类型 方法名（类型 变量名）{}
e.g
 public <T> void show(T t){}
方法名相同，参数不同----方法重载

泛型方法
在测试类时候，创建对象不明确类型 直接用Generic g = new Generic();调用方法时候明确类型

～～～～～～～～～～～～～～
🌟🌟🌟🌟🌟🌟🌟🌟找不同🌟🌟🌟🌟🌟🌟🌟🌟 <T>的位置不同
//泛型类改进
public class GenericMethod <T>{
    public void show(T t){
        System.out.println(t);
    }
}

//泛型方法改进
public class GenericMethod{
    public <T> void show(T t){
        System.out.println(t);
    }
}

----------------------------
类型通配符
为了表示各种泛型List的父类

类型通配符 <?>
List<?>:表示元素类型未知的List，它的元素可以匹配任何类型
仅仅表示它是各种泛型List的父类，并不能把元素添加到其中

只希望它代表某一类泛型List父类，可以使用类型通配符上限、下限
类型通配符上限：<? extends 类型>
List<?extends Number>：它表示的类型是Number或者其子类型

类型通配符下限：<? super 类型>
 List<? super Number>：它表示的类型是Number或者其父类型


----------------------------
泛型接口
格式
修饰符 interface 接口名<类型>{}
范例
 public interface Generic <T> {}

如何给出接口的实现类

public class GenericInterfaceImpl <T> implements GenericInterface <T>{
@Override
public void show(T t) {
    System.out.println(t);

}
}