
list集合概述
有序集合（序列），用户可以精确控制列表中每个元素的插入位置，用户可以通过整数索引访问元素，并搜索列表中的元素
与set集合不同，列表通常允许重复的元素



list集合的特点
有序：存储和取出的元素顺序一样
可重复：存储的元素可以重复

遍历
E next():返回下一个元素
boolean hasNext() 判断是否还有元素迭代

遍历集合（迭代器方式）
        Iterator<StudentClass> it = c.iterator();
        while(it.hasNext()){
            StudentClass s = it.next();
            System.out.println(s.getName()+","+s.getAge());
        }
--------------------------

list集合特有的方法：
（collection没有，但是ArrayList有）
void add(int index, E element) :将元素添加到index索引位置上
E get(int index) :根据index索引获取元素
E remove(int index) :根据index索引删除元素
E set(int index, E element):将index索引位置的的元素设置为element

--------------------------
并发修改异常
ConcurrentModificationException

产生原因
迭代器遍历的时候，一开始默认 exceptModCount == modCount
但是每当用add()--modCount+1，exceptModCount无操作
之后，exceptModCount ！= modCount
就会throw new ConcurrentModificationException()

解决方案
用for循环即可---get()
还要使用迭代器遍历,那么就需要使用Iterator的子接口ListIterator来实现向集合中添加
ListIterator中的add()，里面的exceptModCount = modCount，直接赋值，必然相等，从而不会产生并发修改异常


--------------------------
ListIterator：列表迭代器
（1）通过List集合的listIterator()方法得到，所以说它是List集合特有的迭代器
（2）可以沿着任一方向遍历列表，在迭代期间，可以修改list

ListIterator常用方法：
E next():返回下一个元素
boolean hasNext() 判断是否还有元素迭代
E previous()  返回上一个元素
boolean hasPrevious() 判断是否还有元素迭代
void add(E e) 将指定的元素插入列表

--------------------------
List集合常用子类：
ArrayList--底层数据结构--数组（查询快）
LinkedList--底层数据结构--链表（增删快）

--------------------------
LinkedList特有功能：

LinkedList底层使用的是链表结构,因此增删快,查询相对ArrayList较慢
void addFirst(E e) :向链表的头部添加元素
void addLast(E e):向链表的尾部添加元素
E getFirst():获取链头的元素,不删除元素
E getLast():获取链尾的元素,不删除元素
E removeFirst():返回链头的元素并删除链头的元素
E removeLast():返回链尾的元素并删除链尾的元素
