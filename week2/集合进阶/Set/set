Set集合特点
 不包含重复元素的集合
 没有带索引的方法---用不了普通for循环（for i循环）--可以使用迭代器和for each

HashSet：对集合的迭代顺序不作任何保证

--------------------------------
哈希值：JDK根据对象的地址或者字符串或者数字算出来的 int类型的数值
Object类获取对象的哈希值方法
public int hashCode() :  返回对象哈希值

特点：
1、同一个对象调用hashCode()，返回的哈希值相同
2、默认情况，不同对象的哈希值不同；
  override hashCode()方法，可以实现让不同对象的哈希值相同

哈希值有范围，超出范围就只能重复使用
比如："重地"和"通话"两者哈希值一样

--------------------------------
HashSet集合存储元素----保证元素的唯一性，需要重写hashCode()和equals()
 //要重写hashCode()方法--command+N+I--equals() and hashCode()--保证内容相同的不再出现




源码分析

***hs.add("hello");***

//e是"hello"
public boolean add(E e) {
    return map.put(e, PRESENT)==null;
}

～～～～～～～～～～～～～～～～～～～
static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}
～～～～～～～～～～～～～～～～～～～
public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}

～～～～～～～～～～～～～～～～～～～
//hash值和元素的hashCode()方法相关
final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
               boolean evict) {
    Node<K,V>[] tab; Node<K,V> p; int n, i;

    //如果哈希表未初始化，就对其进行初始化
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;

    //根据对象的哈希值计算对象的存储位置，如果该位置没有元素，就存储元素--newNode()
    if ((p = tab[i = (n - 1) & hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    else {
        Node<K,V> e; K k;

        /*
        存入元素和以前的元素比较哈希值
        如果哈希值不同，会继续向下执行，把元素添加到集合
        如果哈希值相同，会调用对象的equals()方法比较内容
          如果返回false，会继续向下执行，把元素添加到集合
          如果返回true，说明元素重复，不存储
        */
        if (p.hash == hash &&
            ((k = p.key) == key || (key != null && key.equals(k))))
            e = p;
        else if (p instanceof TreeNode)
            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
        else {
            for (int binCount = 0; ; ++binCount) {
                if ((e = p.next) == null) {
                    p.next = newNode(hash, key, value, null);
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    break;
                }
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                    break;
                p = e;
            }
        }
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            if (!onlyIfAbsent || oldValue == null)
                e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
    }


--------------------------------
LinkedHashSet集合特点
1、哈希表和链表实现Set接口---可预测的迭代次序
2、由链表保证元素有序---元素的取出和存储顺序一致
3、由哈希表保证元素唯一---没有重复元素

--------------------------------
TreeSet
可以按照指定规则对元素进行排序
集合特点：
  元素有序--不是存储和取出的顺序--是按照一定规则进行具体排序--取决于构造方法
  TreeSet():根据其元素的自然排序进行排序--从小到大--无参数构造
  TreeSet(Comparator comparator):根据指定的比较器进行排序---带参数构造

  无索引--不能用for i循环--而是用for each和迭代器循环
  由于是Set集合--不包含重复元素


创建集合对象
//<>里面要的是引用类型，而不是基本类型，所以是Integer，不是int
  TreeSet<Integer> ts = new TreeSet<Integer>();

TreeSet集合练习
 存储整数并遍历

@Override compareTo()方法--return 0 --表示两者是相同元素
                        --return 1（正数） --按照添加元素的顺序 输出的（升序）
                        --return -1（负数）--按照添加元素的顺序 倒着输出的（降序）
--------------------------------
自然排序Comparable使用
存储对象并遍历，创建TreeSet集合使用**无参构造方法**
要求：按照年龄从小到大排序
     年龄相同时候，按照姓名的字母排序

用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序
自然排序---让元素所属类implements Comparable接口，重写compareTo()方法 🌟不同点🌟
override时候，⚠️要求的主要条件和次要条件
～～～～～～～～～～～～～～～
比较器排序Comparator的使用
存储对象并遍历，创建TreeSet集合使用**带参构造方法**
要求：按照年龄从小到大排序
     年龄相同时候，按照姓名的字母排序

结论：
用TreeSet集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序
比较器排序，就是让集合构造方法接收Comparator的实现类对象，重写compare(x1,x2)方法 🌟不同点🌟
override时候，⚠️要求的主要条件和次要条件

this.age-s.age  从小到大排序
s.age-this.age  从大到小排序
this -- o1 ; s--o2
～～～～～～～～～～～～～～～
为了不混淆--一个采用Actress类，一个采用Customer类
一个在Actress类上实现implements Compare接口，接着override Compareto()
一个是TreeSet方法中传递一个比较器Comparator接口
两者的规则定义一样
🌟🌟🌟
主要条件 题目给出
次要条件 自己分析出来

知识回顾🌟
～～～～～～～～～～～～～～～～～
匿名类(anonymous classes)
是局部内部类一种
前提：存在一个类或者接口，这里的类可以是具体类或者抽象类

本质是：一个继承该类或者实现该接口的子类匿名对象

格式：
    new 类/接口(){
      重写方法;
    }；

范例：
    new Inter(){
       public void show(){

        }
    }

～～～～～～～～～～～～～～～～～
三元运算符： 格式：关系表达式？表达式1：表达式2
    范例： a>b ? a:b
    首先计算关系表达式的值
    如果值为true，运算结果就是表达式1；
    如果值为false，运算结果就是表达式2；