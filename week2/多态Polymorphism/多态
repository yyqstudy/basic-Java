多态
同一个对象，在不同时刻表现出来的不同形态
举例：cat
猫是猫---Cat c = new Cat();
猫是动物---Animal ani = new Cat();
猫在不同时刻表现出来不同形态，这就是多态

多态的前提和体现
1）有继承/实现关系
2）有方法重写
3）有父类引用指向子类对象

---------------------------------
多态中成员访问特点
成员变量：编译看左边，执行看左边
成员方法：编译看左边，执行看右边

为什么成员方法与成员变量不一样？
因为成员方法有重写，而成员变量没有

---------------------------------
多态的好处与弊端
多态的优缺点
优点：提高代码的可扩展性
     具体体现：定义方法时候，使用父类型作为参数，将来在使用时候，使用具体的子类型参与操作
缺点：无法直接访问子类特有的成员


---------------------------------
多态的转型
解决多态缺点：无法直接访问子类特有的成员
向上转型：
从子到父
父类引用指向子类对象
当有子类对象赋值给一个父类引用时，便是向上转型，多态本身就是向上转型的过程。

格式：
父类类型  变量名 = new 子类类型();
Animal a = new Cat();

向下转型：
从父到子
父类引用转为子类对象
一个已经向上转型的子类对象可以使用强制类型转换的格式，将父类引用转为子类引用，这个过程是向下转型。如果是直接创建父类对象，是无法向下转型的

格式：
 子类类型 变量名 = (子类类型) 父类类型的变量;
 Cat c =(Cat)a;//a是父类引用，强行转成子类c
 c.eat();
 c.playGame();

---------------------------------

